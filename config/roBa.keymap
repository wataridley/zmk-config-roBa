#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        scroll {
            bindings = <&to 5>;
            key-positions = <31 32>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W           &kp E         &kp R                       &kp T                                    &kp Y                        &kp U  &kp I     &kp O     &kp P
&mt LEFT_CONTROL A  &kp S           &kp D         &kp F                       &kp G        &mkp MB3       &kp COMMA    &kp H                        &kp J  &kp K     &kp L     &mt RIGHT_CONTROL MINUS
&mt LEFT_SHIFT Z    &kp X           &kp C         &kp V                       &kp B        &kp COLON      &kp PERIOD   &kp N                        &kp M  &mkp MB1  &mkp MB2  &mt RIGHT_SHIFT SLASH
&kp LCTRL           &kp LEFT_SHIFT  &kp LEFT_ALT  &mt LEFT_COMMAND LC(SPACE)  &lt 1 SPACE  &lt 2 TAB      &lt 3 ENTER  &mt RIGHT_COMMAND RC(SPACE)                             &kp ESC
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp LS(NUMBER_1)      &kp LS(NUMBER_2)      &kp LS(NUMBER_3)   &kp LS(NUMBER_4)  &kp LS(NUMBER_5)                                 &kp LS(NUMBER_6)  &kp LS(NUMBER_7)   &kp LS(NUMBER_8)  &kp LS(N9)  &kp LS(N0)
&kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &trans            &kp C_MUTE      &trans         &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH     &kp MINUS   &kp EQUAL
&kp PRINTSCREEN       &trans                &trans             &trans            &trans            &trans          &trans         &kp COLON         &kp DOUBLE_QUOTES  &kp COMMA         &kp PERIOD  &trans
&trans                &trans                &trans             &trans            &trans            &trans          &kp BACKSPACE  &kp DELETE                                                         &trans
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        NUM {
            bindings = <
&kp F1   &kp F2   &kp F3   &kp F4   &kp F5                       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_0  &none
&kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &trans      &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS      &kp MINUS
&kp F11  &kp F12  &kp F13  &kp F14  &kp F15  &trans      &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS     &kp SLASH
&trans   &trans   &trans   &trans   &trans   &trans      &trans  &trans                                                  &trans
            >;
        };

        ARROW {
            bindings = <
&none   &none   &none   &none   &none                       &kp LC(UP_ARROW)  &kp LC(LEFT_ARROW)  &kp UP_ARROW    &kp LC(RIGHT_ARROW)  &kp LC(DOWN_ARROW)
&none   &none   &none   &none   &none   &trans      &trans  &kp HOME          &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp END
&none   &none   &none   &none   &none   &trans      &trans  &none             &kp LG(LEFT_ARROW)  &none           &kp LG(RIGHT_ARROW)  &none
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                                     &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        condition {
            if-layers = <1 2>;
            then-layer = <6>;
        };
    };
};
